


export const typeDefs: string= // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWork {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createWork(data: WorkCreateInput!): Work!
  updateWork(data: WorkUpdateInput!, where: WorkWhereUniqueInput!): Work
  updateManyWorks(data: WorkUpdateManyMutationInput!, where: WorkWhereInput): BatchPayload!
  upsertWork(where: WorkWhereUniqueInput!, create: WorkCreateInput!, update: WorkUpdateInput!): Work!
  deleteWork(where: WorkWhereUniqueInput!): Work
  deleteManyWorks(where: WorkWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  title: String!
  p: String
  author_name: String!
  img_url: String!
  text_content: String
  published_at: String
  view_cont: String!
  interisting_count: Int!
  social_links: String
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  title: String!
  p: String
  author_name: String!
  img_url: String!
  text_content: String
  published_at: String
  view_cont: String!
  interisting_count: Int!
  social_links: String
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  p_ASC
  p_DESC
  author_name_ASC
  author_name_DESC
  img_url_ASC
  img_url_DESC
  text_content_ASC
  text_content_DESC
  published_at_ASC
  published_at_DESC
  view_cont_ASC
  view_cont_DESC
  interisting_count_ASC
  interisting_count_DESC
  social_links_ASC
  social_links_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  p: String
  author_name: String!
  img_url: String!
  text_content: String
  published_at: String
  view_cont: String!
  interisting_count: Int!
  social_links: String
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  title: String
  p: String
  author_name: String
  img_url: String
  text_content: String
  published_at: String
  view_cont: String
  interisting_count: Int
  social_links: String
}

input PostUpdateManyMutationInput {
  title: String
  p: String
  author_name: String
  img_url: String
  text_content: String
  published_at: String
  view_cont: String
  interisting_count: Int
  social_links: String
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  p: String
  p_not: String
  p_in: [String!]
  p_not_in: [String!]
  p_lt: String
  p_lte: String
  p_gt: String
  p_gte: String
  p_contains: String
  p_not_contains: String
  p_starts_with: String
  p_not_starts_with: String
  p_ends_with: String
  p_not_ends_with: String
  author_name: String
  author_name_not: String
  author_name_in: [String!]
  author_name_not_in: [String!]
  author_name_lt: String
  author_name_lte: String
  author_name_gt: String
  author_name_gte: String
  author_name_contains: String
  author_name_not_contains: String
  author_name_starts_with: String
  author_name_not_starts_with: String
  author_name_ends_with: String
  author_name_not_ends_with: String
  img_url: String
  img_url_not: String
  img_url_in: [String!]
  img_url_not_in: [String!]
  img_url_lt: String
  img_url_lte: String
  img_url_gt: String
  img_url_gte: String
  img_url_contains: String
  img_url_not_contains: String
  img_url_starts_with: String
  img_url_not_starts_with: String
  img_url_ends_with: String
  img_url_not_ends_with: String
  text_content: String
  text_content_not: String
  text_content_in: [String!]
  text_content_not_in: [String!]
  text_content_lt: String
  text_content_lte: String
  text_content_gt: String
  text_content_gte: String
  text_content_contains: String
  text_content_not_contains: String
  text_content_starts_with: String
  text_content_not_starts_with: String
  text_content_ends_with: String
  text_content_not_ends_with: String
  published_at: String
  published_at_not: String
  published_at_in: [String!]
  published_at_not_in: [String!]
  published_at_lt: String
  published_at_lte: String
  published_at_gt: String
  published_at_gte: String
  published_at_contains: String
  published_at_not_contains: String
  published_at_starts_with: String
  published_at_not_starts_with: String
  published_at_ends_with: String
  published_at_not_ends_with: String
  view_cont: String
  view_cont_not: String
  view_cont_in: [String!]
  view_cont_not_in: [String!]
  view_cont_lt: String
  view_cont_lte: String
  view_cont_gt: String
  view_cont_gte: String
  view_cont_contains: String
  view_cont_not_contains: String
  view_cont_starts_with: String
  view_cont_not_starts_with: String
  view_cont_ends_with: String
  view_cont_not_ends_with: String
  interisting_count: Int
  interisting_count_not: Int
  interisting_count_in: [Int!]
  interisting_count_not_in: [Int!]
  interisting_count_lt: Int
  interisting_count_lte: Int
  interisting_count_gt: Int
  interisting_count_gte: Int
  social_links: String
  social_links_not: String
  social_links_in: [String!]
  social_links_not_in: [String!]
  social_links_lt: String
  social_links_lte: String
  social_links_gt: String
  social_links_gte: String
  social_links_contains: String
  social_links_not_contains: String
  social_links_starts_with: String
  social_links_not_starts_with: String
  social_links_ends_with: String
  social_links_not_ends_with: String
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
  title: String
}

type Query {
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  work(where: WorkWhereUniqueInput!): Work
  works(where: WorkWhereInput, orderBy: WorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Work]!
  worksConnection(where: WorkWhereInput, orderBy: WorkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WorkConnection!
  node(id: ID!): Node
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  work(where: WorkSubscriptionWhereInput): WorkSubscriptionPayload
}

type User {
  email: String
  name: String
  password: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String
  name: String
  password: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  email: String
  name: String
  password: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  name: String
  password: String
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  password: String
}

input UserWhereInput {
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  email: String
}

type Work {
  id: ID!
  name: String!
  p: String
  simple_caption: String!
  img_url: String!
  client: String
  website: String
  completed_at: String!
  long_desc: String!
  interisting_count: Int!
  social_links: String
}

type WorkConnection {
  pageInfo: PageInfo!
  edges: [WorkEdge]!
  aggregate: AggregateWork!
}

input WorkCreateInput {
  name: String!
  p: String
  simple_caption: String!
  img_url: String!
  client: String
  website: String
  completed_at: String!
  long_desc: String!
  interisting_count: Int!
  social_links: String
}

type WorkEdge {
  node: Work!
  cursor: String!
}

enum WorkOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  p_ASC
  p_DESC
  simple_caption_ASC
  simple_caption_DESC
  img_url_ASC
  img_url_DESC
  client_ASC
  client_DESC
  website_ASC
  website_DESC
  completed_at_ASC
  completed_at_DESC
  long_desc_ASC
  long_desc_DESC
  interisting_count_ASC
  interisting_count_DESC
  social_links_ASC
  social_links_DESC
}

type WorkPreviousValues {
  id: ID!
  name: String!
  p: String
  simple_caption: String!
  img_url: String!
  client: String
  website: String
  completed_at: String!
  long_desc: String!
  interisting_count: Int!
  social_links: String
}

type WorkSubscriptionPayload {
  mutation: MutationType!
  node: Work
  updatedFields: [String!]
  previousValues: WorkPreviousValues
}

input WorkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: WorkWhereInput
  AND: [WorkSubscriptionWhereInput!]
  OR: [WorkSubscriptionWhereInput!]
  NOT: [WorkSubscriptionWhereInput!]
}

input WorkUpdateInput {
  name: String
  p: String
  simple_caption: String
  img_url: String
  client: String
  website: String
  completed_at: String
  long_desc: String
  interisting_count: Int
  social_links: String
}

input WorkUpdateManyMutationInput {
  name: String
  p: String
  simple_caption: String
  img_url: String
  client: String
  website: String
  completed_at: String
  long_desc: String
  interisting_count: Int
  social_links: String
}

input WorkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  p: String
  p_not: String
  p_in: [String!]
  p_not_in: [String!]
  p_lt: String
  p_lte: String
  p_gt: String
  p_gte: String
  p_contains: String
  p_not_contains: String
  p_starts_with: String
  p_not_starts_with: String
  p_ends_with: String
  p_not_ends_with: String
  simple_caption: String
  simple_caption_not: String
  simple_caption_in: [String!]
  simple_caption_not_in: [String!]
  simple_caption_lt: String
  simple_caption_lte: String
  simple_caption_gt: String
  simple_caption_gte: String
  simple_caption_contains: String
  simple_caption_not_contains: String
  simple_caption_starts_with: String
  simple_caption_not_starts_with: String
  simple_caption_ends_with: String
  simple_caption_not_ends_with: String
  img_url: String
  img_url_not: String
  img_url_in: [String!]
  img_url_not_in: [String!]
  img_url_lt: String
  img_url_lte: String
  img_url_gt: String
  img_url_gte: String
  img_url_contains: String
  img_url_not_contains: String
  img_url_starts_with: String
  img_url_not_starts_with: String
  img_url_ends_with: String
  img_url_not_ends_with: String
  client: String
  client_not: String
  client_in: [String!]
  client_not_in: [String!]
  client_lt: String
  client_lte: String
  client_gt: String
  client_gte: String
  client_contains: String
  client_not_contains: String
  client_starts_with: String
  client_not_starts_with: String
  client_ends_with: String
  client_not_ends_with: String
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  completed_at: String
  completed_at_not: String
  completed_at_in: [String!]
  completed_at_not_in: [String!]
  completed_at_lt: String
  completed_at_lte: String
  completed_at_gt: String
  completed_at_gte: String
  completed_at_contains: String
  completed_at_not_contains: String
  completed_at_starts_with: String
  completed_at_not_starts_with: String
  completed_at_ends_with: String
  completed_at_not_ends_with: String
  long_desc: String
  long_desc_not: String
  long_desc_in: [String!]
  long_desc_not_in: [String!]
  long_desc_lt: String
  long_desc_lte: String
  long_desc_gt: String
  long_desc_gte: String
  long_desc_contains: String
  long_desc_not_contains: String
  long_desc_starts_with: String
  long_desc_not_starts_with: String
  long_desc_ends_with: String
  long_desc_not_ends_with: String
  interisting_count: Int
  interisting_count_not: Int
  interisting_count_in: [Int!]
  interisting_count_not_in: [Int!]
  interisting_count_lt: Int
  interisting_count_lte: Int
  interisting_count_gt: Int
  interisting_count_gte: Int
  social_links: String
  social_links_not: String
  social_links_in: [String!]
  social_links_not_in: [String!]
  social_links_lt: String
  social_links_lte: String
  social_links_gt: String
  social_links_gte: String
  social_links_contains: String
  social_links_not_contains: String
  social_links_starts_with: String
  social_links_not_starts_with: String
  social_links_ends_with: String
  social_links_not_ends_with: String
  AND: [WorkWhereInput!]
  OR: [WorkWhereInput!]
  NOT: [WorkWhereInput!]
}

input WorkWhereUniqueInput {
  id: ID
  name: String
}
`
      
    